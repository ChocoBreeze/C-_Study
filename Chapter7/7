6장의 심화 - 고급 그래프 알고리즘

고급 그래프 문제 ~ 동적 계획법
  벨만-포드 알고리즘, 존슨 알고리즘, 코사라주 알고리즘
  
1. Shortest Path Problem Review
  다익스트라 - 매 단계 마다 그리디 방식이용 --> 모든 그래프에 적용가능하지는 않다.(ex. 음수 edge)
  
  -음수 edge -> Bellman-Ford algorithm
    그래프의 모든 에지에 대해 다익스트라의 그리디 선택 방법을 (V-1)번 반복(그래프의 모든 정점을 방문하기 위해)하여 점진적으로 최단거리를 찾음.
    다익스트라 알고리즘보다 시간복잡도가 높지만 다익스트라 알고리즘으로 해결하지 못하는 그래프에 대해 정확한 결과를 제공.
    *음수 가중치 사이클 : 사이클을 돌았을 때 가중치 합이 음수인 경우
    
  Bellman-Ford의 경우 Dijkstra 알고리즘이 동작하지 않는 그래프에 대해서도 정확한 결과를 제공.
  단, 음수 edge를 가지고 있지 않은 Graph의 경우에 Dijkstra가 더 효율적임
  
  -Johnson's algorithm : Bellman-Ford(음수 가중치) + Dijkstra(효율성)
    (1) 그래프에 dummy 정점을 추가하는 것, 그 후 dummy 정점과 다른 모든 정점 사이에 가중치가 0인 edge 연결 --> Bellman-ford(더미 정점과 다른 정점 사이의 최단 경로 찾기)
      가중치가 0인 edge --> 모든 최단 거리 값은 0보다 클 수 없다.
      모든 정점에 대한 연결을 통해 거리 값이 모든 가능한 순회 경로에서 일정한 관계 유지 가능. --> edge 가중치와 최단 거리의 합 연산이 간단해짐.
      (이동 경로상의 연속한 정점에 대해서 거리 값 연산이 상쇄되어, 전체 합은 첫 번째 정점과 마지막 정점의 거리 값 차와 같음.)

2. 강한 연결 요소(정점 U -> V로 가는 경로가 있을 때, v -> u로 가는 경로도 존재하는 경우)
  -무방향 그래프에서 연결 요소(connected component) : 모든 정점이 서로 연결되어 있는 부분 그래프 중에서 최대 크기 부분 그래프 집합을 의미.
  --> 단절된 연결 요소 간에는 이동 불가능
  -강한 연결성은 방향성 그래프에만 적용되는 특징 --> 그래프 내에서 다른 부분 그래프와 완전히 단절되어 있을 필요는 없다.(부분 그래프 사이에 경로 존재 가능)
  
  -강한 연결 요소를 찾는 대표 알고리즘 : Kosaraju's algorithm
    DFS를 2번 수행하는 형태(원그래프에 1번, 전치(edge방향 반대로)된 그래프에 1번).(BFS도 사용가능하긴 하다..)
    복잡할 수 있는 문제를 직관적으로 단순화하는 측면에서 매우 효과적, 구현하기도 쉬운 편임.
    입력 그래프가 인접 리스트로 표현되는 경우 O(V+E) 형태의 선형 점근적 시간 복잡도를 가지므로 매우 효율적임.
    
    
3. 그래프 -> 적절한 방법 선택이 중요..
  -데이터의 특성
  -구현 코드의 가독성 및 간결성 vs 성능 차이
  
  유의사항
    -복붙 금지.
    -실제 사용할 데이터에 맞게 구현.
    -목적 달성을 위한 기능 구현 + 기본적인 구성 요소 고려.
    
  
