-댜앙한 알고리즘 설계 기법 & 주요 연산 최적화 방법
분할 정복
1~3 챕터 : 자료 구조 -> 다양한 방식의 데이터 저장 방식을 의미하며, 그 안에 저장된 데이터에 접근 시 필요한 비용을 결정.
계산 문제를 해결하기 위해 데이터를 변환하는 방법도 중요. 데이터에 대한 정확한 정의와 데이터 변환 순서 <- 일련의 명령에 의해 결정되며 = 알고리즘 이라 함.

계산 복잡도 
  P(Polynomial time) : 다항 시간 문제
  NP(Non-deterministic polynomial time) : 검증은 다항 시간이지만 알려진 다항 시간 솔루션은 없음
  EXPTIME(Exponential Time) : 지수 함수 형태의 시간 복잡도
  PSPACE(Polynomial Space) : 문제는 다항식 크기의 공간이 필요

이번 챕터 Divide & Conquer 을 중점으로 다룸.

1. 이진 검색
  알고리즘에서 사용하는 데이터 타입과 알고리즘 로직을 분리하는 것 --> 코드 재사용
  
2. 분할 정복
  -divide : 주어진 문제를 동일 방식으로 해결 가능한 여러 부분 문제로 나누기
  -conquer : 부분 문제에 대한 해답 구하기
  -combine : 부분 문제의 해답 결합 -> 전체 문제의 해답
  1) 정렬 :
      요구 사항 : 모든 데이터 타입 / 많은 양의 데이터 / 빠른 속도
      -merge sort
      -quick sort --> std::sort()
  2) 각 단계에서 문제를 두 개 이상으로 분할
    -선형 시간 선택(linear time selection)
  * 이용 가능한 여러 함수가 있으니 이용하면 됨
  
  3)맵 리듀스: 더 높은 추상화 레벨의 분할 정복 기법
    -맵 : 컨테이너의 모든 원소에 함수 f(x)를 적용하는 연산 --> std::transform()
    -리듀스 : 컨테이너의 모든 원소 x에 함수 f(x)를 적용하여 하나의 값으로 축약하는 연산 --> std::accumulate  /  std::reduce
    *부분통합
      : 맵 단계에서 입력을 중간 단계의 <키, 값> 쌍으로 표현 / 리듀스 단계에서 중간 단계의 <키, 값> 쌍을 원하는 방식으로 결합하여 최종 결과 생성.
    -맵 리듀스 모델의 이점 : 대규모로 확장 가능한 소프트 웨어 만들 수 있음.
    큰 문제를 작은 문제로 나누고 부분 문제의 솔루션을 구한 후 맵 리듀스 모델을 사용해 일련의 솔류션으로 합치기.
    
    
분할 정복의 두 가지 관점 :
  1. 알고리즘 설계 패러다임의 하나
  2. 소프트웨어 확장 도구
