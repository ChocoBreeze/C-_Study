그래프.
  -G = <V, E> V = 정점의 집합 / E = Edge의 집합.

  1. 그래프 순회(graph traversal) 문제
    -특정 정점에서 시작하여 나머지 모든 정점을 방문하는 문제.
    -특정 정점을 찾기 위한 용도로 사용가능하기 때문에 그래프 탐색 문제(graph search problem)이라고 하기도 함.
      BFS(Breadth-First Search) : 정점 ID를 큐에 저장해 가까운 정점을 멀리 있는 정점보다 먼저 방문할 수 있도록 구현 / 시간 복잡도 = O(V+E)
      DFS(Depth-First Search) : 특정 경로를 따라 가능한 멀리 있는 정점을 재귀적으로 먼저 방문(Backtracking), 스택을 통해 구현 / 시간 복잡도 = O(V+E)
      
    -이분 그래프(bipartite graph) : 정점을 두 개의 집합으로 나눌 수 있는 그래프로 이 때 그래프의 모든 에지는 서로 다른 집합에 속한 정점끼리 연결되어야 함.
      -bfs로 증명 가능
      -일반적인 그래프에서는 NP-Complete도 이분 그래프에서는 다항 시간 내에 푸는 것이 가능.
    
  2. MST(최소 신장 트리) - 모든 정점을 연결하고 연결된 에지의 가중치 합이 최소인 트리
    -Prim Algorithm(BFS와 동작 방식 유사) - Mean Heap 이용
      -시작 정점에 가까운 경계 구성, 경계는 이전에 방문했던 정점들에 의해 구성됨 --> 현재 경계에 인접한 정점을 반복적으로 탐색
      경계를 관통하는 에지 중에서 가장 가중치가 작은 에지 선택, 이 에지에 연결된 정점 방문
      -시간 복잡도 = O(ElogV) / 피보나치 최소 힙의 경우 O(E+VlogV)
    -Kruskal은 적은 수의 edge로 구성된 sparse graph에 주로 사용 / Prim은 많은 수의 edge로 구성된 dense graph에 주로 사용
  
  3. Dijkstra Shortest Path
    시작 정점으로부터 각 정점까지의 전체 거리를 사용, 목적 정점이 나타나면 종료(Prim은 다 찾을 때까지 진행)
      -Mean Heap이용
      -시간 복잡도 = O(E + VlogV)
     
