Lookup & Hash
Lookup(조회) = 특정 원소가 컨테이너에 있는지 확인하거나 또는 특정 컨테이너에서 특정 Key에 해당하는 Value을 찾는 작업
--> 빠르게 하기 위해서 Hash Table & Bloom Filter 이용
1) Hash Table
  높이 균형 트리 - O(logN) --> 검색 횟수가 늘어나면 연산 속도가 만족스럽지 않다. --> Hash Table이용
  Hashing = 데이터를 가급적 고유한 숫자 값으로 표현 후 데이터의 유무 등 확인
  가장 간단한 Hash Function = Modulo Function --> Collision 문제 발생 가능
  Collision(충돌) 문제 해결
    1. Chaining -- Linked List
      삽입은 O(1), lookup과 삭제에서 시간 소요가 증가.
      Hash Table의 크기 너무 크면 메모리 낭비 / 너무 작으면 충돌 증가 --> 적절히 조절할 필요 있음
      Load Factor(부하율) = 전체 키 개수 / 해시 테이블 크기
        = 1 -> 이상적인 상태
        < 1 -> 메모리 낭비될 수 있음
        > 1 -> 검색, 삭제 등이 느리게 동작 가능
      But, 부하율이 해시 테이블의 성능을 결정하는 유일한 지표는 아니며 때로는 이상적이지 않은 경우에 대해 이상적이라 생각 가능.
      --> 해시 함수에서 다른 Key에 대해 겹치지 않도록 분포되는 해시 값을 만드는 것이 중요하다
    2. Open Addressing(열린 주소 지정)
      -모든 원소를 해시 테이블 내부에 저장하는 방식
      -특정 해시 값에 해당하는 위치가 이미 사용되고 있다면?... 다른 빈 위치 탐색
      1. 선형 탐색 - 비어 있는 다음 위치 탐색 --> 특정 값 주변에 몰린다(군집화 문제) - 검색 속도 저하
      2. 이차함수 탐색 x+1^2, x+2^2... - 군집화는 방지하지만 다른 해시 값인데도 저장되는 위치는 영향을 받는다.
      3. 뻐꾸기 해싱(cuckoo hashing) - 구현만 제대로 된다면 O(1)
        2개의 해시 테이블에 각각 다른 해시 함수 사용, 모든 원소는 두 해시 테이블 중 하나에 있을 수 있으며 나중에 다른 위치로 이동 가능
        모든 원소가 2개의 저장 가능한 위치를 가지며, 상황에 따라 이동 가능. - 이 예시에서는 해시 테이블이 2개인 경우만 고려.
        삽입의 경우 -> 무한 루프 가능 -> 새 해시 함수로 재해싱 필요. / 전체 해시 테이블 크기 이상의 원소를 저장할 수는 없으며 높은 성능을 위해 부하율이 0.5미만이어야 함.
    3. C++ Hash Table
      -unordered_map : key + value / -unordered_set : key 저장.
      -해시 함수 : std::hash<std::string>(std::string) 이용
      -기본 데이터 타입에 대한 해시 함수는 STL에서 제공, 사용자 정의 클래스 또는 구조체를 키 타입으로 사용? --> 해시 함수 정의가 필요함.
      -Boost 라이브러리의 hash_combine()함수를 사용해 원하는 해시 함수 구성 가능.
    4. Bloom filter : 해시 테이블에 비해 공간 효율이 높지만 부정확한 결과를 얻을 수도 있다.
      -룩업 -> 특정 원소가 존재한다(있을 수도 있고 없을 수도 있다.) / 특정 원소가 없다(진짜 없다)
      -여러 개의 해시 함수에 따라 비트 값이 달라질 수 있기 때문
      -이메일 중복 확인에 사용 가능.(많은 데이터가 있어서 해시 테이블 사용이 어렵고, 거짓-양성이 있어도 괜찮은 경우)

Lookup --> 결정적 solution & 확률적 solution 선택하여 사용!

      
        
      
